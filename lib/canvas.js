// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Canvas = (function(_super) {

    __extends(Canvas, _super);

    function Canvas() {
      return Canvas.__super__.constructor.apply(this, arguments);
    }

    Canvas.prototype.GRID_STROKE = "lightgrey";

    Canvas.prototype.COL_W = 10;

    Canvas.prototype.ROW_H = 10;

    Canvas.prototype.FPS = 25;

    Canvas.prototype.PAUSED = false;

    Canvas.prototype.ENTITY_FILL = "green";

    Canvas.prototype.initialize = function() {
      var _this = this;
      this.canvas = document.getElementById("myCanvas");
      this.ctx = this.canvas.getContext("2d");
      this.width = this.ctx.canvas.width;
      this.height = this.ctx.canvas.height;
      this.initBoard();
      this.initGrid();
      this.initStats();
      if (typeof this.bindEvents === "function") {
        this.bindEvents();
      }
      return setInterval((function() {
        if (!_this.PAUSED) {
          _this.stats.begin();
          _this.render();
          return _this.stats.end();
        }
      }), 1000 / this.FPS);
    };

    Canvas.prototype.render = function() {
      this.clearCanvas();
      this.drawBoard();
      this.drawGridData();
      return typeof this.tick === "function" ? this.tick() : void 0;
    };

    Canvas.prototype.initStats = function() {
      this.stats = new Stats;
      this.stats.domElement.style.position = 'absolute';
      this.stats.domElement.style.right = '8px';
      this.stats.domElement.style.top = '8px';
      return document.body.appendChild(this.stats.domElement);
    };

    Canvas.prototype.initBoard = function() {
      this.max_width = this.width - (this.width % this.COL_W);
      this.max_height = this.height - (this.height % this.ROW_H);
      this.num_cols = this.max_width / this.COL_W;
      return this.num_rows = this.max_height / this.ROW_H;
    };

    Canvas.prototype.initGrid = function() {
      var x, y, _i, _ref, _results;
      this.grid = [];
      _results = [];
      for (x = _i = 0, _ref = this.num_cols; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        this.grid[x] = [];
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (y = _j = 0, _ref1 = this.num_rows; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.grid[x][y] = Math.round(Math.random()));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Canvas.prototype.set = function(_arg) {
      var col, row;
      col = _arg[0], row = _arg[1];
      this.drawGridItem(col, row);
      return this.grid[col][row] = 1;
    };

    Canvas.prototype.get = function(col, row) {
      if (col < 0 || row < 0 || col >= this.num_cols || row >= this.num_rows) {
        return 0;
      }
      return this.grid[col][row];
    };

    Canvas.prototype.clearCanvas = function() {
      return this.ctx.clearRect(0, 0, this.width, this.height);
    };

    Canvas.prototype.drawBoard = function() {
      this.drawSquare(0, 0, this.max_width, this.max_height);
      return this.drawGrid();
    };

    Canvas.prototype.drawGrid = function() {
      var x, y, _i, _j, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results;
      for (x = _i = _ref = this.COL_W, _ref1 = this.max_width, _ref2 = this.COL_W; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; x = _i += _ref2) {
        this.drawLine(x, 1, x, this.max_height - 1);
      }
      _results = [];
      for (y = _j = _ref3 = this.ROW_H, _ref4 = this.max_height, _ref5 = this.ROW_H; _ref3 <= _ref4 ? _j < _ref4 : _j > _ref4; y = _j += _ref5) {
        _results.push(this.drawLine(1, y, this.max_width - 1, y));
      }
      return _results;
    };

    Canvas.prototype.drawGridData = function() {
      var col, cols, row, value, _i, _len, _ref, _results;
      _ref = this.grid;
      _results = [];
      for (col = _i = 0, _len = _ref.length; _i < _len; col = ++_i) {
        cols = _ref[col];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (row = _j = 0, _len1 = cols.length; _j < _len1; row = ++_j) {
            value = cols[row];
            if (value === 1) {
              _results1.push(this.drawGridItem(col, row));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Canvas.prototype.drawGridItem = function(col, row, f) {
      if (f == null) {
        f = this.ENTITY_FILL;
      }
      return this.drawSquare(col * this.COL_W, row * this.ROW_H, this.COL_W, this.ROW_H, "", f);
    };

    Canvas.prototype.getMousePos = function(e) {
      var col, position, row, x, y;
      position = this.canvas.getBoundingClientRect();
      x = e.clientX - position.left;
      y = e.clientY - position.top;
      col = Math.floor(x / this.COL_W);
      row = Math.floor(y / this.ROW_H);
      return [col, row];
    };

    return Canvas;

  })(Graphics);

}).call(this);
