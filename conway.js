// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Conway = (function(_super) {

    __extends(Conway, _super);

    function Conway() {
      return Conway.__super__.constructor.apply(this, arguments);
    }

    Conway.prototype.tick = function() {
      var cell, col, cols, is_alive, kill, num_neighbours, resurect, row, value, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _results;
      kill = [];
      resurect = [];
      _ref = this.grid;
      for (col = _i = 0, _len = _ref.length; _i < _len; col = ++_i) {
        cols = _ref[col];
        for (row = _j = 0, _len1 = cols.length; _j < _len1; row = ++_j) {
          value = cols[row];
          num_neighbours = this.numNeighbors(col, row);
          is_alive = value ? true : false;
          if (is_alive && num_neighbours < 2) {
            kill.push([col, row]);
          }
          if (is_alive && num_neighbours > 3) {
            kill.push([col, row]);
          }
          if (!is_alive && num_neighbours === 3) {
            resurect.push([col, row]);
          }
        }
      }
      for (_k = 0, _len2 = kill.length; _k < _len2; _k++) {
        cell = kill[_k];
        this.grid[cell[0]][cell[1]] = 0;
      }
      _results = [];
      for (_l = 0, _len3 = resurect.length; _l < _len3; _l++) {
        cell = resurect[_l];
        _results.push(this.grid[cell[0]][cell[1]] = 1);
      }
      return _results;
    };

    Conway.prototype.numNeighbors = function(col, row) {
      var down, down_left, down_right, left, right, up, up_left, up_right;
      up = this.get(col, row - 1);
      down = this.get(col, row + 1);
      left = this.get(col - 1, row);
      right = this.get(col + 1, row);
      up_right = this.get(col + 1, row - 1);
      down_right = this.get(col + 1, row + 1);
      down_left = this.get(col - 1, row + 1);
      up_left = this.get(col - 1, row - 1);
      return up + down + left + right + up_right + down_right + down_left + up_left;
    };

    Conway.prototype.bindEvents = function() {
      var _this = this;
      this.canvas.onmousedown = function(e) {
        return _this.onMouseDown(e);
      };
      this.canvas.onmouseup = function(e) {
        return _this.onMouseUp(e);
      };
      this.canvas.onmouseout = function(e) {
        return _this.onMouseUp(e);
      };
      return this.canvas.onmousemove = function(e) {
        return _this.onMouseMove(e);
      };
    };

    Conway.prototype.getMousePos = function(e) {
      var col, position, row, x, y;
      position = this.canvas.getBoundingClientRect();
      x = e.clientX - position.left;
      y = e.clientY - position.top;
      col = Math.floor(x / this.COL_W);
      row = Math.floor(y / this.ROW_H);
      return [col, row];
    };

    Conway.prototype.onMouseDown = function(e) {
      this.mouse_state = 1;
      this.PAUSED = 1;
      return this.set(this.getMousePos(e));
    };

    Conway.prototype.onMouseUp = function(e) {
      this.mouse_state = 0;
      return this.PAUSED = 0;
    };

    Conway.prototype.onMouseMove = function(e) {
      if (this.mouse_state) {
        return this.set(this.getMousePos(e));
      }
    };

    return Conway;

  })(Canvas);

}).call(this);
